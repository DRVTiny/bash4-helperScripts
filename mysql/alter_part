#!/bin/bash
#CREATE TABLE `manage_partitions` (
#  `tablename` VARCHAR(64) NOT NULL COMMENT 'Имя секционируемой таблицы',
#    `period` VARCHAR(64) NOT NULL COMMENT 'Период секционирования: day или month',
#      `keep_history` INT(3) UNSIGNED NOT NULL DEFAULT '1' COMMENT 'Количество дней или месяцев хранения секций',
#        `last_updated` DATETIME DEFAULT NULL COMMENT 'Время последнего добавления секции',
#          `comments` VARCHAR(128) DEFAULT '1' COMMENT 'Комментарии',
#            PRIMARY KEY (`tablename`)
#            ) ENGINE=INNODB;
declare -A slf=([fullpath]=$0 [dirpath]=${0%/*} [name]=${0##*/})

doShowUsage () {
 cat <<USAGE
 Usage: ${slf[name]} \
  -d DATABASE \
  -z START_DAY \
  -f PART_BY_FIELD \  
  [ -h DB_HOST (Default: localhost) ] \
  [-i INFO_TABLE (Default: manage_partitions)] \
  [ -x (for debug)] \
  [ -c (for InnoDB native compression)]
USAGE
 return 0
}

set +H
shopt -s extglob

declare -A IfMissedArg=(
 [dbName]='!mand!'
 [dbHost]='localhost'
 [dayZ]='!mand!'
 [infoTable]='manage_partitions'
 [partByField]='!mand!'
)

declare -A k2v=([d]='dbName' [h]='dbHost' [z]='dayZ' [i]='infoTable' [f]='partByField' [c]='flCompress')
declare -A v2k
for k in ${!k2v[@]}; do v2k[${k2v[$k]}]=$k; done

while getopts 'xc d: h: z: i: f:' k; do
 [[ $k == 'x' ]] && { set -x; DEBUG=1; continue; }
 [[ ${k2v[$k]} ]] || continue
 eval ${k2v[$k]}="${OPTARG:-1}"
done
shift $((OPTIND-1))

for arg in ${!IfMissedArg[@]}; do
 [[ ${!arg} ]] || {
  if [[ ${IfMissedArg[$arg]} == '!mand!' ]]; then
   echo "Mandatory argument missed: you must specify value for -${v2k[$arg]} option" >&2
   doShowUsage
   exit 1
  else
   eval $arg="${IfMissedArg[$arg]}"
  fi
 }
done

declare -A dateMask=(['day']='%Y(DEL)%m(DEL)%d' ['month']='%Y(DEL)%m')
declare -A  dateAdd=(['day']=''                 ['month']='-01')

nextDate () {
 local curDate=$1 period=$2 del=$3
 [[ $curDate =~ ^[0-9] ]] && curDate+=${dateAdd[$period]}
 date -d "$curDate +1 $period" +${dateMask[$period]//(DEL)/$del}
 return $?
}

declare -A inThePast=([day]=$(date -d "$dayZ" +%Y-%m-%d) [month]=$(date -d "$dayZ" +%Y-%m))
declare -A nearFuture=([day]=$(nextDate today day) [month]=$(nextDate today month))
 cat <<SQLHERE
USE \`$dbName\`;
SQLHERE
for tper in $(mysql -h $dbHost "$dbName" <<<"SELECT CONCAT(tablename,':',period) FROM $infoTable;" | sed 1d); do
 table=${tper%%:*}
 period=${tper##*:}
 [[ $period =~ ^(day|month)$ ]] || continue
 add2date=${dateAdd[$period]}
 future=${nearFuture[$period]}
 curDate=${inThePast[$period]}
 cat <<SQLHERE
ALTER TABLE \`$table\` ${flCompress:+ROW_FORMAT=COMPRESSED KEY_BLOCK_SIZE=16 }PARTITION BY RANGE ($partByField) (
SQLHERE
 {
 while : ; do
  prvDate=$curDate
  curDate=$(nextDate $prvDate $period '-')
  (( ${curDate//-/} > future )) && break
  cat <<SQLHERE
 PARTITION p${prvDate//-/_} VALUES LESS THAN (UNIX_TIMESTAMP("${curDate}${add2date} 00:00:00") div 1) ENGINE = InnoDB,
SQLHERE
 done
 } | sed '$s%,$%);%'
done
