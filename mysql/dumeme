#!/bin/bash
shopt -s extglob
shopt -s expand_aliases
set +H
declare -A slf=(
                [fullpath]="$0"
		[realdir]=$(readlink -e "$(dirname $0)")
		[TAG]=MyDump4Slave
		[NAME]=${0##*/}
	       )
doShowUsage () {
 cat <<EOMSG
Usage: ${slf[NAME]}
                   [-u USERNAME]
                   [-p PASSWORD]
                   [-H DB_HOST]
                   [-b BACKUP_DIR]
                   [-B PATH_SQL_BEFORE]
                   [-A PATH_SQL_AFTER]
                   [-t]
                   [-x]
                   [-h]
                    DATABASE
                    
Where:
 Options are:
  -u USERNAME - login to MySQL as USERNAME
  -p PASSWORD - login to MySQL with PASSWORD
  -B PATH_SQL_BEFORE - list of files to include BEFORE main dump ("inserted before mysqldump"). List-delimiter is ":::" (literally: three colons)
  -A PATH_SQL_AFTER  - list of files to include AFTER main dump ("inserted after mysqldump"). List-delimiter is ":::" (literally: three colons)  
  -b BACKUP_DIR - base backup directory where timestamp-named directory will be created
  
 Keys are:
  -x for internal BASH debug (do set -x internally)
  -t for dry-run - only shows commands that can affect MySQL server
  -h show this very useful message :)
  
 Mandatory parameters are:
  DATABASE - name of the database to dump
EOMSG
 return 0
}

declare -A DB
BACKUP_BASE='/backup/mysql'

while getopts 'u: p: H: b: B: A: hxt' k; do
 case $k in
# use export MYSQL_PWD="***" in your .bashrc if you need to login with the current system user name
# use -u and -p only if you need to login with another user than `whoami` shows   
  u) DB[USER]=$OPTARG   ;;  
  p) DB[PASS]="$OPTARG" ;;
  H) DB[HOST]="$OPTARG" ;;
  b) BACKUP_BASE="$OPTARG" ;;
  B) ADD_SQL_BEFORE="$OPTARG" ;;
  A) ADD_SQL_AFTER="$OPTARG" ;;
  h) doShowUsage; exit 0 ;;
  t) DRYRUN=1
     source <(sed -nr '/^=+<dryrun\.inc>=/,/^=+<\/dryrun\.inc>=/p' "${slf[fullpath]}" | sed '1d; $d')
  ;;
  x)    set -x;      TRACE=1  ;;
  *|\?) doShowUsage; exit 1   ;;
 esac
done
shift $((OPTIND-1))

DB[NAME]=$1

[[ ${DB[NAME]} ]] || { echo "${slf[NAME]}: error: you must specify database name, see '${slf[NAME]} -h' for usage info" >&2; exit 1; }
fgrep -q '=<functions.inc>=' "$0" && {
 source <(sed -nr '/^=+<functions\.inc>=/,/^=+<\/functions\.inc>=/p' "${slf[fullpath]}" | sed '1d; $d') || {
  echo 'Cant source functions.inc inside-section' >&2
  exit 1
 }
} 

source ${slf[realdir]}/my_helpers.inc || {
 echo "${slf[NAME]}: Error: Cant source functions" >&2
 exit 1
}

TS=$(date +%Y%m%d_%H%M%S)
BAKD="$BACKUP_BASE/$TS"
[[ -d $BAKD ]] && { log error "Target backup directory '$BAKD' already exist"; exit 1; }
mkdir -p "$BAKD"
ERRF="$BAKD/dump.errs"

cmd 'reset master'
cmd 'flush privileges; set GLOBAL read_only = true'
trap "cmd 'set GLOBAL read_only = false'" EXIT
cmd 'show master status' > "$BAKD"/master.status

exec 3<&1 1>"$BAKD"/dump.sql
cat <<'EOF'
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
-- \Create tables
EOF
for t in $(cmd 'show tables' | sed 1d); do
 cmd --auto-vertical-output -sss -- "show create table $t" | \
  sed -n '/^Create Table: /,${ s%^Create Table: %%; ${ s%$%;\n% }; p }'
done
echo '-- /Create tables'

[[ $ADD_SQL_BEFORE ]] && add_sqls_here "$ADD_SQL_BEFORE"
 
echo '-- \Data dump'

# mysqldump output will go to dump.sql because of global i/o redirection which was set later with 'exec' directive
cmd '&mysqldump' --no-create-info --single-transaction --routines --triggers 2>"$ERRF" &

PID=$!
echo $PID > "$BAKD"/mysqldump.pid
sleep 0.01

cmd 'set GLOBAL read_only = false'
trap '' EXIT

sleep 10

if [[ -d /proc/$PID ]]; then
 wait $PID; ret=$?
 if [[ $ret -eq 0 ]]; then
  echo '-- /Data dump'
  [[ $ADD_SQL_AFTER ]] && add_sqls_here "$ADD_SQL_AFTER"
 fi
fi

exec 1<&3

[[ -d $BAKD ]] || exit 3

if [[ $ret>0 ]]; then
 log error "mysqldump unsuccess. ${ret:+Return code=$ret. }Path='$BAKD'. Reason="$([[ -f $ERRF && $(stat -c %s "$ERRF")>0 ]] && cat "$BAKD/dump.errs" || echo -n 'unknown"') 
# rm -rf "$BAKD"
 exit 4
fi

exit 0
=====<functions.inc>=====
add_sqls_here () {
 local sqlFileList="$1" sqlFile 
 declare -i errc=0
 [[ $sqlFileList ]] || return 1
 while read sqlFile; do
  [[ -f $sqlFile && -r $sqlFile ]] || { errc+=1; continue; }
  cat <<EOSQLFILE   
-- \Dump from '$sqlFile' file
--   SOURCE='$sqlFile'
--   PWD=$(pwd)
$(<"$sqlFile")
-- /Dump from '$sqlFile' file
EOSQLFILE
 done < <(sed 's/:::/\n/g' <<<"$sqlFileList")
 return $((errc<<8))
}
=====</functions.inc>=====
=====<dryrun.inc>=====
for c in mysql{,dump}; do
 eval "
$c () {
 echo "TEST[${c^^}] \$@"
}
"
done
=====</dryrun.inc>=====
